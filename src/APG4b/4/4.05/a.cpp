#include <bits/stdc++.h>
using namespace std;

int main() {
  int x = 1;
  int *p;    // int8_t型に対するポインタを定義
  p = &x;    // xのアドレスで初期化
  *p = 2;    // ポインタが指すメモリへの書き込み
  cout << x << endl;  // 2

  int y;
  y = *p;  // ポインタ経由でxの値を読み取る
  cout << y << endl;  // 2
}


// スタック領域とヒープ領域
// C++で変数を使うとそれに対応するメモリ領域が割り当てられるということを説明しました。

// 変数を使うにはその分だけメモリを割り当てる必要があります。 メモリは有限なので、必要な分だけメモリを割り当て、
// 必要が無くなったらそのメモリを解放する必要があります。

// このようなメモリの管理は面倒ですが、ある程度はコンパイラが自動でやってくれます。

// ここでは、どのようにメモリが割り当てられるかを簡単に説明します。


// メモリ領域の分類
// プログラムから使用されるメモリは静的領域、スタック領域、ヒープ領域という大きく分けて3種類の領域に分けられます。

// 静的領域
// グローバル変数はプログラムの開始から終了までずっと有効な変数なので、 ずっとメモリ上に割り当てられている必要があります。

// プログラム開始時に割り当てられて終了時に解放されればよいので、 グローバル変数のメモリ割り当て・解放はコンパイラによって
// 自動的に行われます。

// このときにグローバル変数が配置されるメモリ領域を静的領域といいます。

// スタック領域
// ローカル変数はスコープの範囲内で有効なので、 スコープの始まりでメモリを確保し、スコープの終わりでメモリを解放すれば十分です。

// ローカル変数の割り当てと解放もコンパイラによって自動的に行われます。 このときに配置されるメモリ領域をスタック領域といいます

// ヒープ領域
// プログラムを設計する上で、何らかの情報を「スコープの範囲を超えて」扱いたいことがあります。 
// このような場合に利用するのがヒープ領域です。

// ヒープ領域は柔軟に使える分、プログラマが責任を持って割り当て・解放を行わなければなりません。

// また、ヒープ領域はポインタを介して読み書きを行う必要があります。

// ヒープ領域はメモリを有効活用したい場合のためのものです。 メモリ有効活用する必要のない場合は、
// 予めグローバル変数として必要な分だけメモリを確保しておけば十分なことが多いです。